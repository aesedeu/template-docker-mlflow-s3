version: '3.6'

services:
  postgres:
    env_file:
      - ./.env
    image: postgres:16.2
    networks:
      - internal
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./build/init.sql:/docker-entrypoint-initdb.d/init.sql

  mlflow:
    build:
      context: ./build/
      dockerfile: Dockerfile
    image: mlflow_server:1.0
    depends_on:
      - postgres
    ports:
      - "${MLFLOW_PORT}:5000"
    env_file:
      - ./.env
    networks:
      - internal
    environment:
      MLFLOW_AUTH_CONFIG_PATH: /basic_auth.ini
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DEFAULT_BUCKET_NAME: ${DEFAULT_BUCKET_NAME}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    entrypoint: bash -c "mlflow server --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB} --default-artifact-root s3://${DEFAULT_BUCKET_NAME} --host 0.0.0.0 --port 5000 --app-name basic-auth"
    # volumes:
    #   - ./build/basic_auth.ini:/basic_auth.ini

  minio:
    image: quay.io/minio/minio
    container_name: minio
    ports:
      - '${S3_API_PORT}:9000'
      - '${S3_UI_PORT}:9001'
    volumes:
      - 'minio_data:/data'
    env_file:
      - ./.env
    networks:
      - internal
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 1m30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: always
  
  mc:
    image: quay.io/minio/mc
    container_name: minio_mc
    volumes:
      - minio_data:/data
    env_file: "./.env"
    networks:
      - internal
    entrypoint: >
      bash -c "
      mc alias set minio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
      if ! mc ls minio | grep --quiet ${DEFAULT_BUCKET_NAME}; then
        mc mb minio/${DEFAULT_BUCKET_NAME}
      else
        echo '${DEFAULT_BUCKET_NAME} already exists'
      fi
      "
    depends_on:
      minio:
        condition: service_healthy
    restart: on-failure

volumes:
  minio_data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./data/minio_data

networks:
  internal:
    driver: bridge